// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Smakoowa_Api.Data;

#nullable disable

namespace Smakoowa_Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230512185202_addedCommentableId")]
    partial class addedCommentableId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecipeTag", b =>
                {
                    b.Property<int>("RecipesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("RecipesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("RecipeTag");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Soups"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Main courses"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Snacks"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Salads"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Preserves"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Additions"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Bakery"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Cold cuts"
                        });
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Comments.CommentReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentedId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentedId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CommentReplies");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Comments.RecipeComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentedId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentedId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("RecipeComments");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Likes.CommentReplyLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("LikeableType")
                        .HasColumnType("int");

                    b.Property<int>("LikedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LikedId");

                    b.ToTable("CommentReplyLikes");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Likes.RecipeCommentLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("LikeableType")
                        .HasColumnType("int");

                    b.Property<int>("LikedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LikedId");

                    b.ToTable("RecipeCommentLikes");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Likes.RecipeLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("LikeableType")
                        .HasColumnType("int");

                    b.Property<int>("LikedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LikedId");

                    b.ToTable("RecipeLikes");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Likes.TagLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("LikeableType")
                        .HasColumnType("int");

                    b.Property<int>("LikedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LikedId");

                    b.ToTable("TagLikes");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServingsTier")
                        .HasColumnType("int");

                    b.Property<int>("TimeToMakeTier")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "American",
                            TagType = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Asian",
                            TagType = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Czech",
                            TagType = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Polish",
                            TagType = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Italian",
                            TagType = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Mexican",
                            TagType = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Indian",
                            TagType = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "French",
                            TagType = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Chinese",
                            TagType = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Greek",
                            TagType = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Balkan",
                            TagType = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Thai",
                            TagType = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Hungarian",
                            TagType = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Mediterranean",
                            TagType = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Ukrainian",
                            TagType = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Jewish",
                            TagType = 1
                        },
                        new
                        {
                            Id = 17,
                            Name = "Gluten-free",
                            TagType = 0
                        },
                        new
                        {
                            Id = 18,
                            Name = "Lactose-free",
                            TagType = 0
                        },
                        new
                        {
                            Id = 19,
                            Name = "Sugar-free",
                            TagType = 0
                        },
                        new
                        {
                            Id = 20,
                            Name = "For children",
                            TagType = 0
                        },
                        new
                        {
                            Id = 21,
                            Name = "Dietary",
                            TagType = 0
                        },
                        new
                        {
                            Id = 22,
                            Name = "Vegetarian",
                            TagType = 0
                        },
                        new
                        {
                            Id = 23,
                            Name = "Vegan",
                            TagType = 0
                        },
                        new
                        {
                            Id = 24,
                            Name = "For health",
                            TagType = 0
                        },
                        new
                        {
                            Id = 25,
                            Name = "Easter",
                            TagType = 2
                        },
                        new
                        {
                            Id = 26,
                            Name = "Christmas",
                            TagType = 2
                        },
                        new
                        {
                            Id = 27,
                            Name = "Party",
                            TagType = 2
                        },
                        new
                        {
                            Id = 28,
                            Name = "Grill",
                            TagType = 2
                        },
                        new
                        {
                            Id = 29,
                            Name = "Fat Thursday",
                            TagType = 2
                        },
                        new
                        {
                            Id = 30,
                            Name = "Valentine's Day",
                            TagType = 2
                        },
                        new
                        {
                            Id = 31,
                            Name = "Halloween",
                            TagType = 2
                        },
                        new
                        {
                            Id = 32,
                            Name = "Communion",
                            TagType = 2
                        },
                        new
                        {
                            Id = 33,
                            Name = "For work",
                            TagType = 2
                        });
                });

            modelBuilder.Entity("Smakoowa_Api.Models.Identity.ApiRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "deb06764-fc86-45e4-80ef-1f99b5274bce",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "b84b80a3-1a30-4d6c-90fc-bd5ada24998d",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Smakoowa_Api.Models.Identity.ApiUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cef80aac-83d8-4a8f-a3f5-ceaa1a9f5fc2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "PlaceholderAdmin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe3285ab-355c-4459-a9dd-d4119c4e70b3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "PlaceholderUser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.Identity.ApiRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.Identity.ApiRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeTag", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Comments.CommentReply", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Comments.RecipeComment", "RepliedComment")
                        .WithMany("CommentReplies")
                        .HasForeignKey("CommentedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", "Creator")
                        .WithMany("CommentReplies")
                        .HasForeignKey("CreatorId");

                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("RepliedComment");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Comments.RecipeComment", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Recipe", "Recipe")
                        .WithMany("RecipeComments")
                        .HasForeignKey("CommentedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", "Creator")
                        .WithMany("RecipeComments")
                        .HasForeignKey("CreatorId");

                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Recipe");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Ingredient", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Instruction", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Recipe", "Recipe")
                        .WithMany("Instructions")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Likes.CommentReplyLike", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", "Creator")
                        .WithMany("CommentReplyLikes")
                        .HasForeignKey("CreatorId");

                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Comments.CommentReply", "LikedCommentReply")
                        .WithMany("Likes")
                        .HasForeignKey("LikedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LikedCommentReply");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Likes.RecipeCommentLike", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", "Creator")
                        .WithMany("RecipeCommentLikes")
                        .HasForeignKey("CreatorId");

                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Comments.RecipeComment", "LikedRecipeComment")
                        .WithMany("Likes")
                        .HasForeignKey("LikedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LikedRecipeComment");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Likes.RecipeLike", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", "Creator")
                        .WithMany("RecipeLikes")
                        .HasForeignKey("CreatorId");

                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Recipe", "LikedRecipe")
                        .WithMany("Likes")
                        .HasForeignKey("LikedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LikedRecipe");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Likes.TagLike", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", "Creator")
                        .WithMany("TagLikes")
                        .HasForeignKey("CreatorId");

                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Tag", "LikedTag")
                        .WithMany("Likes")
                        .HasForeignKey("LikedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LikedTag");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Recipe", b =>
                {
                    b.HasOne("Smakoowa_Api.Models.DatabaseModels.Category", "Category")
                        .WithMany("Recipes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", "Creator")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatorId");

                    b.HasOne("Smakoowa_Api.Models.Identity.ApiUser", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Category", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Comments.CommentReply", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Comments.RecipeComment", b =>
                {
                    b.Navigation("CommentReplies");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Instructions");

                    b.Navigation("Likes");

                    b.Navigation("RecipeComments");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.DatabaseModels.Tag", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Smakoowa_Api.Models.Identity.ApiUser", b =>
                {
                    b.Navigation("CommentReplies");

                    b.Navigation("CommentReplyLikes");

                    b.Navigation("RecipeCommentLikes");

                    b.Navigation("RecipeComments");

                    b.Navigation("RecipeLikes");

                    b.Navigation("Recipes");

                    b.Navigation("TagLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
